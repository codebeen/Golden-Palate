@model RRS.Models.ViewModels.TableViewModel

@{
    ViewData["Title"] = "Select Table for Lunch Buffet";
    Layout = "~/Views/Shared/_CustomerLayout.cshtml";
}

<div class="text-center mb-2">
    <h1 class="fs-4">Reserve a Table for @Model.BuffetName Buffet</h1>
    <p class="text-secondary">Choose a table and set your reservation details.</p>
</div>

<div class="d-flex align-items-center justify-content-center flex-wrap gap-3 mt-3 mb-4">
    <div class="form-group w-20">
        <label for="datepickerLunch" class="form-label">Select a date</label>
        <input type="text" id="datepickerLunch" class=" form-control">
    </div>

    <div class="form-group w-20">
        <label for="lunchTimepicker" class="form-label">Select Time</label>
        <input type="text" id="lunchTimepicker" name="lunchTimepicker" class=" form-control">
    </div>
</div>

<div class="container d-flex flex-wrap align-items-start justify-content-center gap-3">
    @foreach (var table in Model.Tables)
    {
        <div class="card border-0 shadow-sm h-100 d-flex flex-column" style="width: 18rem; min-height: 300px;">
            <img src="@table.TableImagePath" class="card-img-top" alt="Table Image">
            <div class="card-body d-flex flex-column">
                <h5 class="card-title">Table Number: @table.TableNumber</h5>
                <p class="card-text text-capitalize text-secondary">Price - ₱@table.Price</p>
                <p class="card-text text-capitalize text-secondary">Location - @table.TableLocation</p>
                <p class="card-text">@table.Description</p>

                <button type="button" class="btn btn-primary w-100 mt-auto"
                        onclick="submitReservation(@table.Id, @table.TableNumber, @table.Price, '@Model.BuffetName', @Model.BuffetPrice)">
                    Reserve Now
                </button>
            </div>
        </div>
    }
</div>

<form id="reservationForm" asp-action="DisplayReservationForm" asp-controller="CustomerReservation" method="post" style="display:none;">
    <input type="hidden" id="formTableId" name="tableId" />
    <input type="hidden" id="formTableNumber" name="tableNumber" />
    <input type="hidden" id="formPrice" name="price" />
    <input type="hidden" id="formDate" name="date" />
    <input type="hidden" id="formTime" name="time" />
    <input type="hidden" id="formBuffetPrice" name="buffetPrice" />
    <input type="hidden" id="formBuffetType" name="buffetType" value="Breakfast" />
</form>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize Datepicker
            $('#datepickerLunch').datepicker({
                dateFormat: 'yy-mm-dd',
                minDate: 0,
                maxDate: "+1Y"
            });

            $('#lunchTimepicker').timepicker({
                timeFormat: 'h:mm a',
                interval: 15,
                minTime: '8:00am',
                maxTime: '7:00pm',
                dynamic: false,
                dropdown: true,
                scrollbar: true
            });
        });

        function submitReservation(tableId, tableNumber, price, buffetName, buffetPrice, buffetType) {
            const date = document.getElementById("datepickerLunch").value;
            const time = document.getElementById("lunchTimepicker").value;

            if (!date || !time) {
                Swal.fire({
                    title: 'Error!',
                    text: 'Please select a date and time for your reservation.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                return;
            }

            // Time validation between 12:00 PM and 2:00 PM
            const timeRegex = /^(\d{2}):(\d{2})\s(AM|PM)$/; // Time format matching "12:00 PM"
            const match = time.match(timeRegex);
            if (match) {
                const hours = parseInt(match[1], 10);
                const minutes = parseInt(match[2], 10);
                const period = match[3];

                // Convert time to 24-hour format for easy comparison
                let timeInMinutes = 0;
                if (period === 'AM') {
                    timeInMinutes = (hours === 12 ? 0 : hours) * 60 + minutes; // 12 AM is 0 hours
                } else {
                    timeInMinutes = (hours === 12 ? 12 : hours + 12) * 60 + minutes; // Convert PM to 24-hour format
                }

                // Define the time range (12:00 PM to 2:00 PM)
                const minTime = 12 * 60; // 12:00 PM in minutes
                const maxTime = 14 * 60; // 2:00 PM in minutes

                if (timeInMinutes < minTime || timeInMinutes > maxTime) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Please select a time between 12:00 PM and 2:00 PM.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                    return;
                }
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: 'Invalid time format. Please select a valid time.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                return;
            }

            document.getElementById("formTableId").value = tableId;
            document.getElementById("formTableNumber").value = tableNumber;
            document.getElementById("formDate").value = date;
            document.getElementById("formTime").value = time;
            document.getElementById("formPrice").value = price;
            document.getElementById("formBuffetPrice").value = buffetPrice;
            document.getElementById("formBuffetType").value = buffetName;

            document.getElementById("reservationForm").submit();
        }

        @if (TempData["SuccessMessage"] != null)
        {
            <text>
                    Swal.fire({
                        title: 'Success!',
                    text: '@TempData["SuccessMessage"]',
                    icon: 'success',
                    confirmButtonText: 'OK'
                            });
            </text>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <text>
                    Swal.fire({
                        title: 'Error!',
                    text: '@TempData["ErrorMessage"]',
                    icon: 'error',
                    confirmButtonText: 'OK'
                            });
            </text>
        }
    </script>
}
