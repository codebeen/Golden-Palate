@model IEnumerable<RRS.Models.ViewModels.ReservationDetailsViewModel>

@{
    ViewData["Title"] = "Staff-Reservations";
    Layout = "~/Views/Shared/_StaffLayout.cshtml";
    var currentAction = ViewContext.RouteData.Values["action"]?.ToString();
    var currentController = ViewContext.RouteData.Values["controller"]?.ToString();
    int counter = 1;
}

<div class="text-left mb-2 d-flex align-items-center justify-content-between">
    <div>
        <h1 class="fs-4">All Reservations</h1>
        <p class="text-secondary">List of all reservations.</p>
    </div>
</div>

<div class="container-fluid d-flex align-items-center justify-content-start gap-3 my-3 w-100 flex-wrap">
    <a class="btn @(currentAction == "Index" && currentController == "StaffReservation" ? "btn-dark" : "btn-outline-dark") p-2" asp-action="Index" asp-controller="StaffReservation">All Reservations</a>
    <a class="btn @(currentAction == "GetUpcomingReservations" ? "btn-dark" : "btn-outline-dark") p-2" asp-action="GetUpcomingReservations" asp-controller="StaffReservation">Upcoming Reservations</a>
    <a class="btn @(currentAction == "GetTodaysReservations" ? "btn-dark" : "btn-outline-dark") p-2" asp-action="GetTodaysReservations" asp-controller="StaffReservation">Today's Reservations</a>
    <a class="btn @(currentAction == "GetOngoingReservations" ? "btn-dark" : "btn-outline-dark") p-2" asp-action="GetOngoingReservations" asp-controller="StaffReservation">Ongoing Reservations</a>
    <a class="btn @(currentAction == "GetCompletedReservations" ? "btn-dark" : "btn-outline-dark") p-2" asp-action="GetCompletedReservations" asp-controller="StaffReservation">Completed Reservations</a>
    <a class="btn @(currentAction == "GetCancelledReservations" ? "btn-dark" : "btn-outline-dark") p-2" asp-action="GetCancelledReservations" asp-controller="StaffReservation">Cancelled Reservations</a>
</div>

<!-- DataTales Example -->
<div class="card border-0 shadow-sm mb-5">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-hover text-center" id="reservationTable">
                <thead>
                    <tr>
                        <th class="text-center">No.</th>
                        <th class="text-center">Reservation Number</th>
                        <th class="text-center">Customer</th>
                        <th class="text-center">Date</th>
                        <th class="text-center">Time</th>
                        <th class="text-center">Table Number</th>
                        <th class="text-center">Buffet Type</th>
                        <th class="text-center">Total Price</th>
                        <th class="text-center">Special Request</th>
                        <th class="text-center">Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var reservation in Model)
                    {
                        <tr>
                            <td class="text-start">@counter</td>
                            <td>@reservation.ReservationNumber</td>
                            <td>@reservation.CustomerFullName</td>
                            <td>@reservation.ReservationDate.ToString("MMMM dd, yyyy")</td>
                            @{
                                // Combine ReservationDate with BuffetType start time
                                DateTime reservationStartDateTime = reservation.ReservationDate.ToDateTime(new TimeOnly(0, 0));

                                switch (reservation.BuffetType.ToLower())
                                {
                                    case "breakfast":
                                        reservationStartDateTime = reservation.ReservationDate.ToDateTime(new TimeOnly(8, 30));
                                        <td>8:00 AM - 10:30 AM</td>
                                        break;
                                    case "lunch":
                                        reservationStartDateTime = reservation.ReservationDate.ToDateTime(new TimeOnly(12, 0));
                                        <td>11:30 AM - 2:30 PM</td>
                                        break;
                                    case "dinner":
                                        reservationStartDateTime = reservation.ReservationDate.ToDateTime(new TimeOnly(17, 30));
                                        <td>5:00 PM - 8:00 PM</td>
                                        break;
                                    default:
                                        <td>-</td>
                                        break;
                                }
                            }
                            <td>@reservation.TableNumber</td>
                            <td class="hidden-xs hidden-sm">@reservation.BuffetType</td>
                            <td class="hidden-xs hidden-sm">₱@reservation.TotalPrice</td>
                            <td class="hidden-xs hidden-sm">@reservation.SpecialRequest</td>
                            <td>
                                @switch (reservation.ReservationStatus.ToLower())
                                {
                                    case "pending":
                                        <span class="text-warning">Pending</span>
                                        break;
                                    case "ongoing":
                                        <span class="text-info">Ongoing</span>
                                        break;
                                    case "cancelled":
                                        <span class="text-danger">Cancelled</span>
                                        break;
                                    case "completed":
                                        <span class="text-success">Completed</span>
                                        break;
                                    default:
                                        <span class="text-black">Unknown</span>
                                        break;
                                }
                            </td>
                            <td class="align-middle text-center">
                                <div class="d-flex justify-content-start gap-1 flex-wrap">
                                    <button type="button" class="btn btn-info btn-sm rounded px-3 py-1" data-bs-toggle="modal" data-bs-target="#staffViewDetails-@reservation.Id" data-url="@Url.Action($"ViewReservationDetailsStaff/{reservation.Id}")">
                                        View
                                    </button>
                                    @await Html.PartialAsync("ReservationDetails", reservation)

                                    @if (reservation.ReservationStatus.ToLower() == "pending")
                                    {
                                        if (reservationStartDateTime >= DateTime.Now)
                                        {
                                            <form method="post" asp-action="StartReservation" asp-controller="StaffReservation" class="d-inline-block">
                                                <input type="hidden" name="reservationId" value="@reservation.Id" />
                                                <button type="submit" class="btn btn-warning btn-sm rounded px-3 py-1">
                                                    Start
                                                </button>
                                            </form>
                                        }
                                        else
                                        {
                                            <form id="cancel-form-@reservation.Id" method="post" asp-action="CancelReservation" asp-controller="StaffReservation" style="display:none;" enctype="multipart/form-data">
                                                <input type="hidden" name="reservationId" value="@reservation.Id" />
                                            </form>

                                            <button type="button" class="btn btn-danger btn-sm rounded px-3 py-1" onclick="confirmCancellation('@reservation.Id')">
                                                Cancel
                                            </button>
                                        }
                                    }

                                    @if (reservation.ReservationStatus.ToLower() == "ongoing")
                                    {
                                        <form method="post" asp-action="CompleteReservation" asp-controller="StaffReservation" class="d-inline-block">
                                            <input type="hidden" name="reservationId" value="@reservation.Id" />
                                            <button type="submit" class="btn btn-success btn-sm rounded px-3 py-1">
                                                Complete
                                            </button>
                                        </form>
                                    }

                                    <button type="submit" class="btn btn-success btn-sm rounded px-3 py-1" data-bs-toggle="modal" data-bs-target="#paymentMethodModal">
                                        Complete
                                    </button>
                                </div>
                            </td>

                        </tr>

                        counter++;
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@await Html.PartialAsync("PaymentMethodModal")

<!-- Scroll to Top Button -->
<a class="scroll-to-top rounded" href="#page-top">
    <i class="fas fa-angle-up"></i>
</a>

<script>
    $(document).ready(function () {
        new DataTable('#reservationTable');
    });

    @if (TempData["SuccessMessage"] != null)
    {
        <text>
                Swal.fire({
                    title: 'Success!',
                text: '@TempData["SuccessMessage"]',
                icon: 'success',
                confirmButtonText: 'OK'
                                         });
        </text>
    }

    @if (TempData["InformationMessage"] != null)
    {
        <text>
                Swal.fire({
                    title: 'Information!',
                text: '@TempData["InformationMessage"]',
                icon: 'info',
                confirmButtonText: 'OK'
                                                 });
        </text>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <text>
                Swal.fire({
                    title: 'Error!',
                text: '@TempData["ErrorMessage"]',
                icon: 'error',
                confirmButtonText: 'OK'
                                        });
        </text>
    }

    function confirmCancellation(reservationId) {
        Swal.fire({
            title: 'Are you sure?',
            text: 'Do you want to cancel this reservation?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, Cancel it!',
            cancelButtonText: 'Close',
        }).then((result) => {
            if (result.isConfirmed) {
                // Submit form programmatically or make an AJAX request
                document.getElementById('cancel-form-' + reservationId).submit();
            }
        });
    }
</script>

<!-- Bootstrap JS Bundle -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
