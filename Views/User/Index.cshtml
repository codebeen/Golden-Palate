@model IEnumerable<RRS.Models.User>

@{
    ViewData["Title"] = "User Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int counter = 1;
}


<div class="text-left mb-2 d-flex align-items-center justify-content-between">
    <div>
        <h1 class="fs-4">User Management</h1>
        <p class="text-secondary">List of all users within the system.</p>
    </div>
    <div class="gap-3">
        <button onclick="showAddUserModal()" type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addUser">
            <i class="fa-solid fa-plus"></i>  Add User
        </button>
        <a type="button" class="btn btn-warning text-white" asp-action="Export" asp-controller="User">
            <i class="fa-solid fa-download"></i>  Export CSV
        </a>
    </div>
</div>

<!-- DataTales Example -->
<div class="card border-0 shadow-sm mb-5">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-hover text-center" id="userTable">
                <thead>
                    <tr>
                        <th class="text-center">No.</th>
                        <th class="text-center">Full Name</th>
                        <th class="text-center">Email</th>
                        <th class="text-center">Role</th>
                        <th class="text-center">Status</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model)
                    {
                        <tr>
                            <td>@counter</td>
                            <td>@(user.FirstName + " " + user.LastName)</td>
                            <td>@user.Email</td>
                            <td>@user.Role</td>
                            @if(user.Status.ToLower() == "active")
                            {
                                <td class="text-success">@user.Status</td>
                            }
                            else if(user.Status.ToLower() == "inactive")
                            {
                                <td class="text-danger">@user.Status</td>
                            }
                            <td class="align-middle text-center">
                                <div class="d-flex justify-content-center gap-1 flex-wrap">
                                    <button onclick="showEditUserModal('@user.Id')" type="button" class="btn btn-outline-warning btn-sm rounded-pill px-2 py-1" data-bs-toggle="modal" data-bs-target="#editUser-@user.Id" data-url="@Url.Action($"Edit/{user.Id}")">
                                        <i class="fa-solid fa-pencil-alt"></i> <!-- Edit icon -->
                                    </button>
                                    @await Html.PartialAsync("EditUserModal", user)

                                    <button onclick="showDeleteUserModal('@user.Id')" type="button" class="btn btn-outline-danger btn-sm rounded-pill px-2 py-1" data-bs-toggle="modal" data-bs-target="#deleteUser-@user.Id" data-url="@Url.Action($"Delete/{user.Id}")">
                                        <i class="fa-solid fa-trash-alt"></i> <!-- Delete icon -->
                                    </button>
                                    @await Html.PartialAsync("DeleteUserModal", user)
                                </div>
                            </td>
                        </tr>

                        counter++;
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modals -->
@await Html.PartialAsync("AddUserModal", new User())

<!-- Scroll to Top Button -->
<a class="scroll-to-top rounded" href="#page-top">
    <i class="fas fa-angle-up"></i>
</a>

<style>

    #addEditHeader {
        border-bottom: none;
        padding: 1.5rem 1.5rem 0.5rem;
        background: linear-gradient(to right, #0062cc, #0096ff);
        color: white;
    }

    #modalHeader {
        border-bottom: none;
        padding: 1.5rem 1.5rem 0.5rem;
        background: linear-gradient(to right, #ff6b6b, #ff8787);
        border-radius: 1rem 1rem 0 0;
        color: white;
    }

    #deleteTableLabel {
        font-weight: 600;
        font-size: 1.25rem;
    }

    #deleteCloseButton {
        filter: brightness(0) invert(1);
        opacity: 0.8;
        transition: opacity 0.2s;
    }
</style>


<!-- Bootstrap JS Bundle -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

@if (TempData["SuccessMessage"] != null)
{
    <script>
        Swal.fire({
            title: 'Success!',
            text: '@TempData["SuccessMessage"]',
            icon: 'success',
            confirmButtonText: 'OK'
        });
    </script>
}

@if (TempData["InformationMessage"] != null)
{
    <script>
        Swal.fire({
            title: 'Information!',
            text: '@TempData["InformationMessage"]',
            icon: 'info',
            confirmButtonText: 'OK'
        });
    </script>
}

@if (TempData["ErrorMessage"] != null)
{
    <script>
        Swal.fire({
            title: 'Error!',
            text: '@TempData["ErrorMessage"]',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    </script>
}

@section Scripts {
    <script>
        $(document).ready(function () {
            new DataTable('#userTable');
        });

        function showAddUserModal() {
            // Clear any existing modal backdrops
            removeModalBackdrops();

            const modalElement = document.getElementById(`addUser`);

            if (modalElement) {
                const addUserModal = new bootstrap.Modal(modalElement);
                addUserModal.show();
            } else {
                console.error(`Modal with ID addUser not found`);
            }
        }

        function showEditUserModal(reservationId) {
            // Clear any existing modal backdrops
            removeModalBackdrops();

            const modalElement = document.getElementById(`editUser-${reservationId}`);

            if (modalElement) {
                const editUserModal = new bootstrap.Modal(modalElement);
                editUserModal.show();
            } else {
                console.error(`Modal with ID editUser-${reservationId} not found`);
            }
        }

        function showDeleteUserModal(reservationId) {
            // Clear any existing modal backdrops
            removeModalBackdrops();

            const modalElement = document.getElementById(`deleteUser-${reservationId}`);

            if (modalElement) {
                const deleteUserModal = new bootstrap.Modal(modalElement);
                deleteUserModal.show();
            } else {
                console.error(`Modal with ID deleteUser-${reservationId} not found`);
            }
        }

        function removeModalBackdrops() {
            const backdrops = document.querySelectorAll('.modal-backdrop');
            backdrops.forEach(backdrop => backdrop.remove());
        }
    </script>
}
